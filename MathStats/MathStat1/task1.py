import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm, gamma, expon

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–∫
num_samples = 10000

# –†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π –≤—ã–±–æ—Ä–∫–∏
sample_size = 500

# –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
sample_means = np.zeros(num_samples)
sample_vars = np.zeros(num_samples)
sample_medians = np.zeros(num_samples)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–±–æ—Ä–æ–∫ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
for i in range(num_samples):
    sample = np.random.normal(size=sample_size)
    sample_means[i] = np.mean(sample)
    sample_vars[i] = np.var(sample)
    sample_medians[i] = np.median(sample)


# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º
plt.figure(figsize=(15, 5))

x = np.linspace(min(sample_means), max(sample_means), 100)
plt.subplot(1, 3, 1)
plt.hist(sample_means, bins=30, density=True)
plt.plot(x, norm.pdf(x, np.mean(sample_means), np.std(sample_means)), 'r-', label='Theoretical Normal')
plt.title('Sample Means')

x = np.linspace(min(sample_vars), max(sample_vars), 100)
plt.subplot(1, 3, 2)
plt.hist(sample_vars, bins=30, density=True)
plt.plot(x, norm.pdf(x, np.mean(sample_vars), np.std(sample_vars)), 'r-', label='Theoretical Normal')
plt.title('Sample Variances')

x = np.linspace(min(sample_medians), max(sample_medians), 100)
plt.subplot(1, 3, 3)
plt.hist(sample_medians, bins=30, density=True)
plt.plot(x, norm.pdf(x, np.mean(sample_medians), np.std(sample_medians)), 'r-', label='Theoretical Normal')
plt.title('Sample Medians')

# ùëõùêπ(ùëã(2)) ‚Üí ùëà1 ‚àº Œì(2, 1)
plt.figure()

# –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
F_X2 = np.zeros(num_samples)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–±–æ—Ä–æ–∫ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
for i in range(num_samples):
    sample = np.random.uniform(size=sample_size)
    sample.sort()
    F_X2[i] = sample_size * sample[1]  # –≤—Ç–æ—Ä–æ–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
plt.hist(F_X2, bins=30, density=True, alpha=0.5, label='Experimental')

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –≥–∞–º–º–∞-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
x = np.linspace(min(F_X2), max(F_X2), 100)
plt.plot(x, gamma.pdf(x, 2, scale=1), 'r-', label='Theoretical Gamma(2, 1)')

plt.legend()

# ùëõ(1 ‚àí ùêπ(ùëã(ùëõ))) ‚Üí ùëà2 ‚àº Œì(1, 1) = Exp(1)
plt.figure()
# –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
F_Xn = np.zeros(num_samples)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–±–æ—Ä–æ–∫ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
for i in range(num_samples):
    sample = np.random.uniform(size=sample_size)
    sample.sort()
    F_Xn[i] = (1 - sample[-1])  # n-—ã–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
counts, bins, _ = plt.hist(F_Xn, bins=30, alpha=0.5, label='Experimental')

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
x = np.linspace(min(F_Xn), max(F_Xn), 100)
bin_width = bins[1] - bins[0]  # –†–∞–∑–º–µ—Ä –±–∏–Ω–∞
pdf_values = expon.pdf(x, scale=1/sample_size)  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
scaled_pdf_values = pdf_values * bin_width * num_samples  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
plt.plot(x, scaled_pdf_values, 'r-', label='Theoretical Exp(1)')
# plt.plot(x, gamma.pdf(x, 1, scale=1), 'g', label='Theoretical Gamma(1, 1)')

plt.legend()
plt.show()

